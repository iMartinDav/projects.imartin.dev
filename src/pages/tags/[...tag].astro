---
import { type CollectionEntry, getCollection } from "astro:content";
import { formatTag } from "../../lib/helpers";
import "../../styles/global.css";
import TagsLayout from "../../layouts/TagsLayout.astro";
import PostItem from "../../components/Post/PostItemV2.astro";
import Navbar from "../../components/Navbar.astro";

interface Post {
  slug: string;
  data: {
    title: string;
    description: string;
    category: string;
    pubDate: string;
    tags: string[];
    image: string;
    author: string;
  };
}

type TagRoute = {
  params: {
    tag: string;
  };
};

// Obtiene las rutas estáticas basadas en las etiquetas
export async function getStaticPaths(): Promise<TagRoute[]> {
  const posts = await getCollection("posts");
  const tagSet = new Set<string>();

  posts.forEach((post) => {
    if (Array.isArray(post.data.tags)) {
      post.data.tags.forEach((tag: string) => {
        const lowercaseTag = tag.toLowerCase();
        const urlTag = formatTag(lowercaseTag);
        tagSet.add(urlTag);
      });
    }
  });

  const tagRoutes: TagRoute[] = Array.from(tagSet).map((tag) => ({
    params: { tag },
  }));

  return tagRoutes;
}

const tagParam: string = Astro.params.tag || "";
const allPosts: CollectionEntry<"posts">[] = await getCollection("posts");

const pageObjects: Post[] = [];

for (const post of allPosts) {
  const tags = post.data.tags;

  if (Array.isArray(tags)) {
    const processedTags = tags.map((tag) => formatTag(tag));

    if (processedTags.includes(formatTag(tagParam))) {
      const newPost: Post = {
        slug: post.slug,
        data: {
          title: post.data.title || "No title",
          description: post.data.description || "No description",
          category: post.data.category || "No category",
          pubDate: post.data.pubDate || new Date().toISOString(),
          tags: tags,
          image: post.data.image || "",
          author: post.data.author || "Default Author",
        },
      };
      pageObjects.push(newPost);
    }
  }
}

// Ordena los posts por fecha de publicación
pageObjects.sort((a, b) => {
  return (
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
});

const Content = pageObjects;
---

<script is:inline>
  // Carga de GSAP y ScrollTrigger
  import 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js';
  import 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js';

  const gsap = window.gsap;
  const ScrollTrigger = window.ScrollTrigger;

  function initAnimations() {
    gsap.registerPlugin(ScrollTrigger);

    const posts = document.querySelectorAll<HTMLElement>('.post-item');
    posts.forEach((post, index) => {
      gsap.fromTo(
        post,
        { 
          opacity: 0, 
          y: 20 
        },
        {
          opacity: 1,
          y: 0,
          duration: 0.25,
          delay: index * 0.1,
          scrollTrigger: {
            trigger: post,
            start: "top 95%",
            toggleActions: "play none none none",
          },
        }
      );
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnimations);
  } else {
    initAnimations();
  }
</script>

<div>
  <TagsLayout title="projects.imartin.dev : tags" description="" />
  <Navbar />

  <div class="w-screen h-full flex flex-col justify-start items-start max-w-2xl mx-auto p-2 md:py-5">
    <h1 class="text-5xl font-bold mb-2 text-neutral-100">
      <a href={`/tags`} class="font-light text-neutral-100/70">tag:</a>
      #{formatTag(tagParam)}
    </h1>
    <div class="font-light mb-4 text-neutral-100/50">
      Other posts tagged with "{tagParam}".
    </div>
    <div class="w-full">
      <ul>
        {
          Content.map((post) => (
            <div class="post-item opacity-0">
              <PostItem
                title={post.data.title}
                description={post.data.description}
                date={post.data.pubDate ? new Date(post.data.pubDate) : new Date()}
                url={post.slug}
                category={post.data.category}
                tags={post.data.tags}
                image={post.data.image}
                author={post.data.author}
              />
            </div>
          ))
        }
      </ul>
    </div>
  </div>
</div>
